(setq default-buffer-file-coding-system 'utf-8-unix)

;; emacs -bg cornsilk
;; To change background color of current frame:
;; M-x set-background-color
(set-background-color "cornsilk")
(set-frame-font "DejaVu Sans Mono-8")
(setq default-frame-alist '((width . 168) (height . 60) (menu-bar-lines . 1)))

;; name (opened by): -unknown-DejaVu Sans Mono-normal-normal-normal-*-13-*-*-*-m-0-iso10646-1
;;        full name: DejaVu Sans Mono:pixelsize=13:foundry=unknown:weight=normal:slant=normal:width=normal:spacing=100:scalable=true
;;             size: 13
;;           height: 17
;;  baseline-offset:  0
;; relative-compose:  0



(use-package flycheck
  :ensure t
  :init (global-flycheck-mode))

(add-hook 'after-init-hook #'global-flycheck-mode)

;; ember-cli (brocoli watch) watches for file changes and it gets
;; confused with emacs temp/lock/backup files, so make these changes.
;; http://ember-cli.com/user-guide/#emacs
(setq backup-directory-alist `((".*" . ,temporary-file-directory)))
(setq auto-save-file-name-transforms `((".*" ,temporary-file-directory t)))
(setq create-lockfiles nil)


;; (add-to-list 'load-path "~/.emacs.d/lisp")
(add-to-list 'load-path "~/.emacs.d/elpa")
;; (add-to-list 'load-path "~/.emacs.d/plugins")


(require 'auto-complete-config)
(add-to-list 'ac-dictionary-directories "~/.emacs.d/ac-dict")
(ac-config-default)

;;(global-set-key "\C-x\C-m" 'compile)

;;(autoload 'js2-mode "js2-mode" nil t)
(add-to-list 'auto-mode-alist '("\\.json5$" . javascript-mode))
;;(add-hook 'js2-mode-hook 'ac-js2-mode)
(add-hook 'js2-mode-hook 'turn-on-auto-fill)

(add-to-list 'auto-mode-alist '("\\.org.txt$" . org-mode))
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cc" 'org-capture)
(global-set-key "\C-cb" 'org-iswitchb)

(require 'yaml-mode)
(add-to-list 'auto-mode-alist '("\\.yml$" . yaml-mode))

;; (add-to-list 'load-path
;;           "~/.emacs.d/plugins/yasnippet")
(require 'yasnippet)
(yas-global-mode 1)
"~/.emacs.d/snippets"
(setq yas-snippet-dirs '("~/.emacs.d/snippets"))


(require 'column-marker)
(add-hook 'find-file-hook (lambda() (interactive) (column-marker-1 80)))

(autoload 'markdown-mode "markdown-mode"
  "Major mode for editing Markdown files" t)
;;(add-to-list 'auto-mode-alist '("\\.markdown\\'" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode))

(require 'handlebars-mode)

;; (add-to-list 'load-path "~/.emacs.d/mustache-mode.el")
;; (require 'mustache-mode)

(defun my-customiszation ()
  (interactive)
  (setq-default fill-column 80)
  (auto-fill-mode))

(my-customiszation)

(global-set-key (kbd "C-c C-c") 'comment-or-uncomment-region)
(global-set-key (kbd "C-c c") 'recompile)

(autoload 'actionscript-mode "actionscript-mode" "Major mode for actionscript." t)
(add-to-list 'auto-mode-alist '("\\.as$" . actionscript-mode))

(eval-after-load "grep"
  '(progn
     (add-to-list 'grep-find-ignored-directories "node_modules")
     (add-to-list 'grep-find-ignored-directories "swagger-ui-static")
     (add-to-list 'grep-find-ignored-directories ".min.js")
     (add-to-list 'grep-find-ignored-directories "public/ext")
     ))

;; indentify: Macro to select the whole buffer, untabify and indent.
;; This macro was defined by doing:
;; + Create a macro using C-x (
;; + Naming the last macro using C-x C-k n
;; + M-x insert-kbd-macro
(fset 'indentify
      (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item (quote ([134217788 67108896 134217790 134217848 117 110 116 97 98 105 tab return 134217756 21 67108896 21 67108896] 0 "%d")) arg)))
;; Choose this key  based on C-M-\ (indent-region)
(global-set-key (kbd "M-\\") 'indentify)
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(ansi-color-faces-vector
   [default bold shadow italic underline bold bold-italic bold])
 '(ansi-color-names-vector
   (vector "#003f8e" "#ff9da4" "#d1f1a9" "#ffeead" "#bbdaff" "#ebbbff" "#99ffff" "#ffffff"))
 '(beacon-color "#ff9da4")
 '(custom-enabled-themes (quote (sanityinc-solarized-dark)))
 '(custom-safe-themes
   (quote
    ("4aee8551b53a43a883cb0b7f3255d6859d766b6c5e14bcb01bed572fcbef4328" "82d2cac368ccdec2fcc7573f24c3f79654b78bf133096f9b40c20d97ec1d8016" default)))
 '(fci-rule-color "#003f8e")
 '(flycheck-color-mode-line-face-to-color (quote mode-line-buffer-id))
 '(frame-background-mode (quote dark))
 '(org-agenda-files nil)
 '(package-selected-packages
   (quote
    (sicp rjsx-mode smartscan rust-mode go-mode color-theme-sanityinc-solarized color-theme-sanityinc-tomorrow color-theme-solarized color-theme-x colormaps color-theme magit yasnippet yaml-mode use-package typescript-mode scss-mode sass-mode less-css-mode handlebars-mode grep-a-lot flymake-sass flycheck column-marker auto-complete ac-js2)))
 '(vc-annotate-background nil)
 '(vc-annotate-color-map
   (quote
    ((20 . "#ff9da4")
     (40 . "#ffc58f")
     (60 . "#ffeead")
     (80 . "#d1f1a9")
     (100 . "#99ffff")
     (120 . "#bbdaff")
     (140 . "#ebbbff")
     (160 . "#ff9da4")
     (180 . "#ffc58f")
     (200 . "#ffeead")
     (220 . "#d1f1a9")
     (240 . "#99ffff")
     (260 . "#bbdaff")
     (280 . "#ebbbff")
     (300 . "#ff9da4")
     (320 . "#ffc58f")
     (340 . "#ffeead")
     (360 . "#d1f1a9"))))
 '(vc-annotate-very-old-color nil))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )


(defun enlarge-window-maximize()
  (interactive)
  (enlarge-window-horizontally 10000)
  (enlarge-window 1000))

(global-set-key (kbd "C-x !") 'enlarge-window-maximize)

(load-file "~/.emacs.d/flow-for-emacs/flow.el")

(global-set-key (kbd "C-x g") 'magit-status)

;; (register-file-header-action "emacs-auto-inc-version[ \t]*: " 'my-update-version-count)

;; (defun my-update-version-count ()
;;   (let* ((v-str  (delete-and-forget-line))
;;          ;; `version-to-list' will also check if the version string is valid
;;          (v-list (version-to-list v-str)) 
;;          (v-major (nth 0 v-list))
;;          (v-minor (nth 1 v-list)))
;;     (insert (format "%0d.%0d" v-major (1+ v-minor)))))
